/*
 * Имя          :  n3310.h
 *
 * Описание     :  Это заголовочный файл для драйвера графического LCD от Nokia 3310, а также его китайских клонов.
 *                 Базируется на коде библиотек написанных Sylvain Bissonnette и Fandi Gunawan:
 *                 http://www.microsyl.com/index.php/2010/03/24/nokia-lcd-library/
 *                 http://fandigunawan.wordpress.com/2008/06/18/lcd-nokia-3310-pcd8544-driver-in-winavravr-gcc/
 *                 Основные отличия между оригиналом и клоном хорошо описаны в статье от Aheir:
 *                 http://radiokot.ru/articles/29/
 *
 * Автор        :  Xander Gresolio <xugres@gmail.com>
 * Веб-страница :  http://we.easyelectronics.ru/profile/XANDER/
 *
 * Лицензия     :  GPL v3.0
 *
 * Компилятор   :  WinAVR, GCC for AVR platform
 */

#ifndef _N3310_H_
#define _N3310_H_

#include <avr/pgmspace.h>

// закомментируйте эту директиву, если ваш дисплей оригинальный
//#define CHINA_LCD

#define DEFAULT_MARGIN 11

// Порт к которому подключен LCD (здесь пример распиновки для ATmega8)
// Библиотека использует аппаратный SPI, поэтому если хотите иной порт - придется реализовать SPI программно)
#define LCD_PORT                   PORTB
#define LCD_DDR                    DDRB

// Распиновка порта
#define LCD_DC_PIN                 PB0
#define SPI_MOSI_PIN               PB3   // SDIN дисплея обязательно подключаем к MOSI аппаратного SPI
#define LCD_RST_PIN                PB4
#define SPI_CLK_PIN                PB5   // SCLK дисплея обязательно подключаем к SCK аппаратного SPI

// Разрешение дисплея в пикселях
#define LCD_X_RES                  84    // разрешение по горизонтали
#define LCD_Y_RES                  48    // разрешение по вертикали


// Размер кэша ( 84 * 48 ) / 8 = 504 байта
#define LCD_CACHE_SIZE             ( ( LCD_X_RES * LCD_Y_RES ) / 8 )

#define FALSE                      0
#define TRUE                       1

// Для возвращаемых значений
#define OK                         0   // Безошибочная отрисовка
#define OUT_OF_BORDER              1   // Выход за границы дисплея
#define OK_WITH_WRAP               2   // Переход на начало (ситуация автоинкремента указателя курсора при выводе длинного текста)

typedef unsigned char byte;

// Перечисления
typedef enum {
    LCD_CMD = 0,     // Команда
    LCD_DATA = 1      // Данные

} LcdCmdData;



typedef enum {
    FONT_1X = 1,      // Обычный размер шрифта 5x7
    FONT_2X = 2       // Увеличенный размер шрифта

} LcdFontSize;

// Прототипы функций, детальную информацию смотрим внутри n3310lcd.c
void LcdInit(void);   // Инициализация
void LcdClear(void);   // Очистка буфера
void LcdUpdate(void);   // Копирование буфера в ОЗУ дисплея
void LcdContrast(byte contrast);   // Установка контрастности дисплея
byte LcdGotoXYFont(byte x, byte y);   // Установка курсора в позицию x,y
byte LcdChr(LcdFontSize size, byte ch, byte margin);   // Вывод символа в текущей позиции
byte LcdStr(LcdFontSize size, char* dataArray, byte margin);   // Вывод строки сохраненной в RAM
byte LcdPixel(byte x, byte y);   // Точка
byte LcdLine(byte x1, byte y1, byte x2, byte y2);   // Линия
byte LcdRect(byte x1, byte y1, byte x2, byte y2);   // Прямоугольник
byte LCDIcon(const byte *pic, byte x1, byte y1, byte arrayRows, byte arrayColumns, byte progMem);


/*
 * Таблица для отображения символов (ASCII[0x20-0x7F] + CP1251[0xC0-0xFF] = всего 160 символов)
 */
static const byte FontLookup[][5] PROGMEM =
        {
                {0x00, 0x00, 0x00, 0x00, 0x00},   //   0x20  32
                {0x00, 0x00, 0x5F, 0x00, 0x00},   // ! 0x21  33
                {0x00, 0x07, 0x00, 0x07, 0x00},   // " 0x22  34
                {0x14, 0x7F, 0x14, 0x7F, 0x14},   // # 0x23  35
                {0x24, 0x2A, 0x7F, 0x2A, 0x12},   // $ 0x24  36
                {0x4C, 0x2C, 0x10, 0x68, 0x64},   // % 0x25  37
                {0x36, 0x49, 0x55, 0x22, 0x50},   // & 0x26  38
                {0x00, 0x05, 0x03, 0x00, 0x00},   // ' 0x27  39
                {0x00, 0x1C, 0x22, 0x41, 0x00},   // ( 0x28  40
                {0x00, 0x41, 0x22, 0x1C, 0x00},   // ) 0x29  41
                {0x14, 0x08, 0x3E, 0x08, 0x14},   // * 0x2A  42
                {0x08, 0x08, 0x3E, 0x08, 0x08},   // + 0x2B  43
                {0x00, 0x00, 0x50, 0x30, 0x00},   // , 0x2C  44
                {0x10, 0x10, 0x10, 0x10, 0x10},   // - 0x2D  45
                {0x00, 0x60, 0x60, 0x00, 0x00},   // . 0x2E  46
                {0x20, 0x10, 0x08, 0x04, 0x02},   // / 0x2F  47
                /*{ 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0 0x30  48
                { 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1 0x31  49
                { 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2 0x32  50
                { 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3 0x33  51
                { 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4 0x34  52
                { 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5 0x35  53
                { 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6 0x36  54
                { 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7 0x37  55
                { 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8 0x38  56
                { 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9 0x39  57*/
                /*{ 0x0, 0x7c, 0x44, 0x7c, 0x0 },   // 0 0x30  48
                { 0x0, 0x8, 0x7c, 0x0, 0x0 },   // 1 0x31  49
                { 0x0, 0x74, 0x54, 0x5c, 0x0 },   // 2 0x32  50
                { 0x0, 0x54, 0x54, 0x7c, 0x0 },   // 3 0x33  51
                { 0x0, 0x1c, 0x10, 0x7c, 0x0 },   // 4 0x34  52
                { 0x0, 0x5c, 0x54, 0x74, 0x0 },   // 5 0x35  53
                { 0x0, 0x7c, 0x54, 0x74, 0x0 },   // 6 0x36  54
                { 0x0, 0x4, 0x4, 0x7c, 0x0 },   // 7 0x37  55
                { 0x0, 0x7c, 0x54, 0x7c, 0x0 },   // 8 0x38  56
                { 0x0, 0x5c, 0x54, 0x7c, 0x0 },   // 9 0x39  57*/
                {0x7c, 0x44, 0x7c, 0x0, 0x0},   // 0 0x30  48
                {0x8, 0x7c, 0x7c, 0x0, 0x0},   // 1 0x31  49
                {0x74, 0x54, 0x5c, 0x0, 0x0},   // 2 0x32  50
                {0x54, 0x54, 0x7c, 0x0, 0x0},   // 3 0x33  51
                {0x1c, 0x10, 0x7c, 0x0, 0x0},   // 4 0x34  52
                {0x5c, 0x54, 0x74, 0x0, 0x0},   // 5 0x35  53
                {0x7c, 0x54, 0x74, 0x0, 0x0},   // 6 0x36  54
                {0x4, 0x4, 0x7c, 0x0, 0x0},   // 7 0x37  55
                {0x7c, 0x54, 0x7c, 0x0, 0x0},   // 8 0x38  56
                {0x5c, 0x54, 0x7c, 0x0, 0x0},   // 9 0x39  57
                {0x00, 0x36, 0x36, 0x00, 0x00},   // : 0x3A  58
                {0x00, 0x56, 0x36, 0x00, 0x00},   // ; 0x3B  59
                {0x08, 0x14, 0x22, 0x41, 0x00},   // < 0x3C  60
                {0x14, 0x14, 0x14, 0x14, 0x14},   // = 0x3D  61
                {0x00, 0x41, 0x22, 0x14, 0x08},   // > 0x3E  62
                {0x02, 0x01, 0x51, 0x09, 0x06},   // ? 0x3F  63
                {0x32, 0x49, 0x79, 0x41, 0x3E},   // @ 0x40  64


                {0x7C, 0x12, 0x11, 0x12, 0x7C},   // А 0xC0 192
                {0x7F, 0x49, 0x49, 0x49, 0x31},   // Б 0xC1 193
                {0x7F, 0x49, 0x49, 0x49, 0x36},   // В 0xC2 194
                {0x7F, 0x01, 0x01, 0x01, 0x01},   // Г 0xC3 195
                {0x60, 0x3F, 0x21, 0x3F, 0x60},   // Д 0xC4 196
                {0x7F, 0x49, 0x49, 0x49, 0x41},   // Е 0xC5 197
                {0x77, 0x08, 0x7F, 0x08, 0x77},   // Ж 0xC6 198
                {0x22, 0x41, 0x49, 0x49, 0x36},   // З 0xC7 199
                {0x7F, 0x10, 0x08, 0x04, 0x7F},   // И 0xC8 200
                {0x7E, 0x10, 0x09, 0x04, 0x7E},   // Й 0xC9 201
                {0x7F, 0x08, 0x14, 0x22, 0x41},   // К 0xCA 202
                {0x40, 0x3E, 0x01, 0x01, 0x7F},   // Л 0xCB 203
                {0x7F, 0x02, 0x0C, 0x02, 0x7F},   // М 0xCC 204
                {0x7F, 0x08, 0x08, 0x08, 0x7F},   // Н 0xCD 205
                {0x3E, 0x41, 0x41, 0x41, 0x3E},   // О 0xCE 206
                {0x7F, 0x01, 0x01, 0x01, 0x7F},   // П 0xCF 207
                {0x7F, 0x09, 0x09, 0x09, 0x06},   // Р 0xD0 208
                {0x3E, 0x41, 0x41, 0x41, 0x22},   // С 0xD1 209
                {0x01, 0x01, 0x7F, 0x01, 0x01},   // Т 0xD2 210
                {0x07, 0x48, 0x48, 0x48, 0x3F},   // У 0xD3 211
                {0x0E, 0x11, 0x7F, 0x11, 0x0E},   // Ф 0xD4 212
                {0x63, 0x14, 0x08, 0x14, 0x63},   // Х 0xD5 213
                {0x3F, 0x20, 0x20, 0x3F, 0x60},   // Ц 0xD6 214
                {0x07, 0x08, 0x08, 0x08, 0x7F},   // Ч 0xD7 215
                {0x7F, 0x40, 0x7E, 0x40, 0x7F},   // Ш 0xD8 216
                {0x3F, 0x20, 0x3F, 0x20, 0x7F},   // Щ 0xD9 217
                {0x01, 0x7F, 0x48, 0x48, 0x30},   // Ъ 0xDA 218
                {0x7F, 0x48, 0x30, 0x00, 0x7F},   // Ы 0xDB 219
                {0x00, 0x7F, 0x48, 0x48, 0x30},   // Ь 0xDC 220
                {0x22, 0x41, 0x49, 0x49, 0x3E},   // Э 0xDD 221
                {0x7F, 0x08, 0x3E, 0x41, 0x3E},   // Ю 0xDE 222
                {0x46, 0x29, 0x19, 0x09, 0x7F},   // Я 0xDF 223
                {0x20, 0x54, 0x54, 0x54, 0x78},   // а 0xE0 224
                {0x3C, 0x4A, 0x4A, 0x4A, 0x31},   // б 0xE1 225
                {0x7C, 0x54, 0x54, 0x28, 0x00},   // в 0xE2 226
                {0x7C, 0x04, 0x04, 0x0C, 0x00},   // г 0xE3 227
                {0x60, 0x3C, 0x24, 0x3C, 0x60},   // д 0xE4 228
                {0x38, 0x54, 0x54, 0x54, 0x18},   // е 0xE5 229
                {0x6C, 0x10, 0x7C, 0x10, 0x6C},   // ж 0xE6 230
                {0x00, 0x44, 0x54, 0x54, 0x28},   // з 0xE7 231
                {0x7C, 0x20, 0x10, 0x08, 0x7C},   // и 0xE8 232
                {0x7C, 0x21, 0x12, 0x09, 0x7C},   // й 0xE9 233
                {0x7C, 0x10, 0x28, 0x44, 0x00},   // к 0xEA 234
                {0x40, 0x38, 0x04, 0x04, 0x7C},   // л 0xEB 235
                {0x7C, 0x08, 0x10, 0x08, 0x7C},   // м 0xEC 236
                {0x7C, 0x10, 0x10, 0x10, 0x7C},   // н 0xED 237
                {0x38, 0x44, 0x44, 0x44, 0x38},   // о 0xEE 238
                {0x7C, 0x04, 0x04, 0x04, 0x7C},   // п 0xEF 239
                {0x7C, 0x14, 0x14, 0x14, 0x08},   // р 0xF0 240
                {0x38, 0x44, 0x44, 0x44, 0x00},   // с 0xF1 241
                {0x04, 0x04, 0x7C, 0x04, 0x04},   // т 0xF2 242
                {0x0C, 0x50, 0x50, 0x50, 0x3C},   // у 0xF3 243
                {0x08, 0x14, 0x7C, 0x14, 0x08},   // ф 0xF4 244
                {0x44, 0x28, 0x10, 0x28, 0x44},   // х 0xF5 245
                {0x3C, 0x20, 0x20, 0x3C, 0x60},   // ц 0xF6 246
                {0x0C, 0x10, 0x10, 0x10, 0x7C},   // ч 0xF7 247
                {0x7C, 0x40, 0x7C, 0x40, 0x7C},   // ш 0xF8 248
                {0x3C, 0x20, 0x3C, 0x20, 0x7C},   // щ 0xF9 249
                {0x04, 0x7C, 0x50, 0x50, 0x20},   // ъ 0xFA 250
                {0x7C, 0x50, 0x20, 0x00, 0x7C},   // ы 0xFB 251
                {0x00, 0x7C, 0x50, 0x50, 0x20},   // ь 0xFC 252
                {0x28, 0x44, 0x54, 0x54, 0x38},   // э 0xFD 253
                {0x7C, 0x10, 0x38, 0x44, 0x38},   // ю 0xFE 254
                {0x48, 0x54, 0x34, 0x14, 0x7C}    // я 0xFF 255
        };

#endif  /*  _N3310_H_ */
